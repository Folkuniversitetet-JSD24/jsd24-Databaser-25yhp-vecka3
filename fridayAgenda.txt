🧾 Lektionsplanering – Fredag 23 maj 2025
⏰ Tid: 13.00–16.00
🎯 Fokus: Introduktion till NoSQL och MongoDB Atlas
🧠 Pedagogiskt fokus: introducera dokumentdatabasens tänk, skapa förståelse för strukturen och komma igång med praktisk CRUD i molnet

-----------------------------
🎯 Syfte

Förstå vad NoSQL och dokumentdatabaser är

Lära sig hur MongoDB organiserar data i dokument och samlingar

Utföra grundläggande CRUD-operationer i MongoDB Atlas

Bekanta sig med databashantering i molnet

-----------------------------
🧠 Agenda

👋 Intro & teori	Vad är NoSQL? Vad är dokumentdatabaser? Skillnad från relationsdatabaser
💻 Code-Along 1	Skapa konto i MongoDB Atlas, skapa kluster och databas, använd Compass
💻 Code-Along 2	Använd gränssnitt (Atlas GUI eller Compass) för att göra CRUD: insertOne, find, updateOne, deleteOne
☕ Paus	
🧑‍💻 Självständig övning	Skapa egen samling i MongoDB Atlas, lägg till dokument, redigera och ta bort
🔁 Reflektion & frågor	Vad är största skillnaden mot SQL? När passar NoSQL bättre?

-----------------------------
-----------------------------
-----------------------------
🧠 TEORI

🗣️ Vad är NoSQL?

“NoSQL” står för Not Only SQL, inte “No SQL”.
Det är alltså inte ett direkt avståndstagande från SQL – utan snarare ett komplement.

Vad innebär det?
NoSQL är ett samlingsnamn för databaser som inte följer den traditionella tabell-baserade modellen med rader och kolumner.

Fyra vanliga typer av NoSQL-databaser:
Dokumentdatabaser -	MongoDB - JSON-liknande dokument
Nyckel–värde-databaser - Redis - key → value-par
Grafdatabaser - Neo4j - Noder och relationer
Kolumndatabaser - Cassandra - Kolumnfamiljer

-----------------------------
🗣️ Vad är en dokumentdatabas?

MongoDB är en dokumentdatabas. Den lagrar data som BSON (Binary JSON), men du som utvecklare jobbar med det som om det vore vanlig JSON.

🔹 Varje dokument motsvarar en “rad”, men kan innehålla nästlade objekt och olika fält.
🔹 Dokumenten ligger i collections, som motsvarar “tabeller”.

📦 Exempel på dokument:
{
  "title": "Clean Code",
  "author": {
    "name": "Robert C. Martin",
    "nationality": "USA"
  },
  "tags": ["programming", "best practices"],
  "year": 2008
}

→ Lägg märke till: author är ett inbäddat objekt, tags är en array.

-----------------------------
🗣️ Skillnad från SQL?

| SQL                            | MongoDB / NoSQL                              |
| ------------------------------ | -------------------------------------------- |
| Tabeller med kolumner          | Samlingar med dokument                       |
| Fördefinierat schema           | Dynamisk struktur per dokument               |
| JOIN för relationer            | Inbäddning eller referenser                  |
| Relationslogik & normalisering | Fokus på snabb åtkomst och flexibilitet      |
| Bra för komplexa affärssystem  | Bra för appar, IoT, loggar, snabb utveckling |

-----------------------------
-----------------------------
-----------------------------
💻 CODE-ALONG – MongoDB Atlas Setup + CRUD

Del 1: Setup

Gå till https://www.mongodb.com/cloud/atlas

🔐 Skapa konto (om du inte redan har ett):

🛠️ Om du redan har ett konto och ett kluster (t.ex. ClusterFolkan):
Gå till fliken "Database" i sidomenyn

Under Clusters, kontrollera att ett kluster redan finns

Klicka på “Browse Collections”

Fortsätt direkt till Create Database (se längre ner)

🗃️ Skapa databas och samling:

Klicka på “Browse Collections”

Klicka på “Create Database”

Ange:

Database name: fjsd24db

Collection name: students


➕ Lägg till ett första dokument:

Klicka på “Insert Document”

Klistra in följande:
{
  "name": "Anna",
  "email": "anna@test.se",
  "age": 22
}

💡 Tips till studenterna
“Ni behöver inte skapa ett _id själva – MongoDB gör det åt er. Bara skriv det ni vill spara, så fixar databasen resten.”

✅ Nu är din databas redo och innehåller ett första dokument!

🆕 Om du inte har ett kluster än:
Klicka på “Create Cluster”

Välj "Shared" (gratis M0)

Välj region: AWS / Stockholm (eu-north-1)

Namnge klustret (valfritt, t.ex. fjsd24)

Klicka på “Create Cluster”

Det tar några minuter – använd väntetiden till diskussion om skillnaden mellan SQL och NoSQL

🔑 Skapa databasautentisering:
Gå till Database Access

Välj "Username/Password"

Skapa en användare, t.ex.:

Användarnamn: fjsd24

Lösenord: fjsd24pass

Spara inloggningsuppgifterna – de behövs senare!

🌐 Tillåt anslutningar:
Gå till “Network Access”

Klicka på “Add IP Address”

Välj “Allow access from anywhere” (0.0.0.0/0)

Spara

-----------------------------
🧪 Del 2: CRUD-operationer i Atlas

🔍 Read – find()

Klicka på students-samlingen

Atlas visar automatiskt alla dokument (find({}))

Du kan söka med filter, t.ex.:
{ "age": { "$gte": 20 } }
{ "age": { "$lt": 25 } }

Namn som är Anna eller Erik	{ "name": { "$in": ["Anna", "Erik"] } }

---------------
➕ Create – insertOne()

Klicka på “Insert Document”

Lägg till fler dokument, t.ex.:
{
  "name": "Erik",
  "email": "erik@test.se",
  "age": 25
}

💡 Tips: Lägg gärna till ett extra fält, t.ex. `"phoneNumber": "0701234567"` till en student.

“Skriv telefonnummer som strängar i MongoDB, inte som siffror – annars kan du förlora inledande nollor.”

"phoneNumber": 0701234567
Det ser ut som ett nummer – men:

MongoDB tolkar det som ett heltal (number)

Men svenska telefonnummer ofta börjar med 0, vilket inte stöds i numeriskt format

0701234567 → blir internt till 701234567 (nollan försvinner!)


"Lägg gärna till ett extra fält som phoneNumber till en student – det är tillåtet! Det här är inte SQL."

---------------
🖊️ Update – updateOne()

Välj en student och klicka på “Update”

Ändra ålder till 23

📌 Alternativt:

Klicka “Open in MongoDB Shell”

Kör t.ex.:
db.students.updateOne({ name: "Anna" }, { $set: { age: 23 } });

---------------
🗑️ Delete – deleteOne()

Klicka på de tre prickarna (…) → Delete

Eller via shell:
db.students.deleteOne({ name: "Erik" });

🧠 Pedagogiska tips att säga under Code-Along:
"MongoDB är schemalöst – vi kan lägga till olika fält i varje dokument."

"GUI är perfekt för att förstå hur data ser ut, men i produktion jobbar vi ofta via kod."

"CRUD = Create, Read, Update, Delete – idag gör vi alla fyra, direkt i molnet."

-----------------------------
-----------------------------
-----------------------------
Dags för övningar

-----------------------------
-----------------------------
-----------------------------
🔁 Gruppdiskussion 

Vad var enklast/svårast?

Vad gillar du med GUI jämfört med pgAdmin(postgresql´s GUI)?

Hur skulle du modellera användare och inlägg i MongoDB?

Vad kan gå fel om man inte har struktur i sin datamodell?

Skulle dagens code along och/eller övningar varit lättare eller svårare att göra i SQL? Varför?