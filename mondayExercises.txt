🧑‍💻 SJÄLVSTÄNDIGA ÖVNINGAR – Mongoose: Schema + Relationer

🧠 Syfte:

Träna på att skapa modeller och schemas med validering

Bygga en-till-många-relationer med ref

Hämta relaterad data med .populate()

Använda .select() för att begränsa fält

----------------------
Tips:
Best practice i Mongoose / MongoDB:

Modellnamn (i mongoose.model(...)) → singular
Exempel: export default mongoose.model("Product", productSchema);

Mongoose förväntar sig singular – den pluraliserar automatiskt när den skapar samlingen i MongoDB.
Product blir automatiskt products i databasen (om du inte anger ett specifikt collection-namn).

Samlingar i MongoDB → plural (automatiskt)
Om du definierar modellen så här: mongoose.model("User", userSchema);
...så skapar Mongoose en MongoDB-collection som heter users.

Sammanfattat:

| Vad      | Namn      | Format     | Exempel                     |
|----------|-----------|------------|-----------------------------|
| Modell   | Singular  | PascalCase | Product, User, Student      |
| Samling  | Plural    | lowercase  | products, users, students   |


----------------------
Extra tips:
Vill du överstyra och använda ett specifikt samlingsnamn, kan du göra så här:
export default mongoose.model("Product", productSchema, "items");

Då används "items" som collection name – men det är inte nödvändigt i normalfallet.

----------------------
🟢 Lätt nivå

1.🏪 Produkter + Kategorier

Scenario: En produkt tillhör en kategori

Uppgift:
Skapa modeller: Products (name, price), Category (name)

Lägg till category: { type: ObjectId, ref: "Category" } i Product

POST /products, GET /products med .populate("category")

----------------------
2. 📚 Böcker + Författare

Scenario: Flera böcker kopplas till en författare

Uppgift:
Skapa Author och Book

Varje Book har title, pages, author (ref)

GET /books ska returnera varje bok + författarens namn och utan _id

----------------------
3. 🍿 Filmer + Regissör

Scenario: Varje film har en regissör

Uppgift:
Director och Movie-modeller

Hämta alla filmer, inkludera endast name från regissören

----------------------
🟠 Medel nivå

1. 👤 Användare + Kommentarer

Scenario: Kommentarer tillhör en användare

Uppgift:
User och Comment-modeller

Skapa POST /comments, GET /comments (med .populate("user"))

Använd validering (required: true) i kommentartexten

----------------------
2. 🛒 Kunder + Ordrar

Scenario: En kund kan ha flera ordrar

Uppgift:
Customer och Order-modeller

En order innehåller total, items, customer (ref)

Testa route som hämtar alla ordrar och visar kundens namn och mejl (endast dessa fält)

----------------------
3. 📅 Event + Deltagare

Scenario: Deltagare registrerar sig till ett event

Uppgift:
Event och Attendee

Attendee innehåller namn och ref till Event

Hämta alla deltagare, visa bara event.name och attendee.name

----------------------
🔴 Svår nivå

1. 👨‍🎓 Studenter + Kurser + Registreringar (many-to-many)

Uppgift:
Modeller: Student, Course, Enrollment

Enrollment innehåller ref till student + course

Hämta alla kurser för en student med dubbla .populate()

----------------------
2. 🧾 Fakturor + Rader + Produkter

Scenario: Faktura innehåller flera rader som pekar på produkter

Uppgift:
Invoice, LineItem, Product

LineItem har quantity och ref till Product och Invoice

Hämta en faktura → alla rader + varje produkts namn

----------------------
3. 🧑‍🏫 Lärare + Klasser + Skolor

Scenario: Lärare undervisar i flera klasser, som tillhör olika skolor

Uppgift:
Teacher, Class, School

En Class har teacher och school (ref)

Hämta alla klasser för en lärare → visa klassnamn + skolnamn (med .populate() på två nivåer)
